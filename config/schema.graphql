type Branch implements Node {
  # The ID of the object.
  id: ID!
  name: String
  message: String
  rev: String
  ctime: String
}

type BranchConnection {
  pageInfo: PageInfo!
  edges: [BranchEdge]!
}

type BranchEdge {
  # The item at the end of the edge
  node: Branch

  # A cursor for use in pagination
  cursor: String!
}

type LogCommit implements Node {
  # The ID of the object.
  id: ID!
  oid: String
  message: String
  author: String
  committer: String
  atime: String
}

type LogCommitConnection {
  pageInfo: PageInfo!
  edges: [LogCommitEdge]!
  rev: String
}

type LogCommitEdge {
  # The item at the end of the edge
  node: LogCommit

  # A cursor for use in pagination
  cursor: String!
}

# An object with an ID
interface Node {
  # The ID of the object.
  id: ID!
}

type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  # The ID of the object
  node(id: ID!): Node
  repo(name: String!): Repo
  repos: [Repo]
}

type Repo implements Node {
  # The ID of the object.
  id: ID!
  name: String!
  path: String!
  description: String
  currentBranch: String
  branches(before: String, after: String, first: Int, last: Int): BranchConnection
  commits(rev: String, before: String, after: String, first: Int, last: Int): LogCommitConnection
}

